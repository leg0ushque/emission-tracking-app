@using EmisTracking.WebApi.Models.ViewModels
@using EmisTracking.Localization
@model ModelWithDependencies<ConsumptionGroupViewModel, SpecificIndicatorViewModel>

@{
    ViewData[Constants.GenerateBreadcrumb] = new();
    ViewData["Title"] = LangResources.Titles.ConsumptionGroupsIndex;

    var isAdmin = (ViewData[Constants.ViewDataConstants.IsAdmin] as bool?).GetValueOrDefault();
}

@section Breadcrumb
{
    <li class="breadcrumb-item"><a asp-action="Index">@LangResources.Titles.ConsumptionGroupsIndex</a></li>
    <li class="breadcrumb-item active">@ViewData["Title"]</li>
}

<p><strong>@LangResources.Fields.Methodology:</strong> @Model.MainItem.Methodology.Name</p>
<p><strong>@LangResources.Fields.Name:</strong> @Model.MainItem.Name</p>

@if (isAdmin)
{
    <a class="btn btn-outline-primary" asp-controller="ConsumptionGroups" asp-action="Update" asp-route-id="@Model.MainItem.Id" name="@LangResources.UpdateButtonText">
        <i class="fas fa-pen"></i> @LangResources.UpdateButtonText
    </a>
    <a class="btn btn-outline-danger" asp-controller="ConsumptionGroups" asp-action="Delete" asp-route-id="@Model.MainItem.Id" name="@LangResources.DeleteButtonText">
        <i class="fas fa-trash"></i> @LangResources.DeleteButtonText
    </a>
    <br />
}
<br />


<h4>@LangResources.Titles.SpecificIndicatorsList</h4>

<a class="btn btn-primary" asp-action="CreateForConsumptionGroup" asp-route-id="@Model.MainItem.Id"
    asp-controller="SpecificIndicators">
    <i class="fas fa-plus"></i>
    @LangResources.CreateButtonText
</a>

<table class="table-striped table-bordered" id="mainItemsTable">
    <thead>
        <tr>
            <th scope="col">№</th>
            <th scope="col">@LangResources.Fields.Name</th>
            <th scope="col">@LangResources.Fields.Pollutant</th>
            <th scope="col">@LangResources.Fields.Value</th>

            @if (isAdmin)
            {
                <th scope="col" data-orderable="false" data-searchable="false"></th>
                <th scope="col" data-orderable="false" data-searchable="false"></th>
            }
        </tr>
    </thead>
    <tbody>
        @{
            foreach (var item in Model.Dependencies)
            {
                <tr>
                    <td></td>
                    <td>
                        <a asp-controller="SpecificIndicators" asp-action="Item" asp-route-id="@item.Id">@item.Name</a>
                    </td>
                    <td>
                        <a asp-controller="Pollutants" asp-action="Item" asp-route-id="@item.Id">@item.Pollutant.Name</a>
                    </td>
                    <td>@item.Value</td>

                    @if (isAdmin)
                    {
                        <td>
                            <a class="btn btn-outline-primary"
                               asp-controller="SpecificIndicators" asp-action="Update" asp-route-id="@item.Id"
                               name="@LangResources.UpdateButtonText">
                                <i class="fas fa-pen"></i>
                            </a>
                        </td>
                        <td>
                            <a class="btn btn-outline-danger"
                               asp-controller="SpecificIndicators" asp-action="Delete" asp-route-id="@item.Id"
                               name="@LangResources.DeleteButtonText">
                                <i class="fas fa-trash"></i>
                            </a>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        await Html.RenderPartialAsync("_JqueryDatatable");

        var columnWidths = new Queue<string>(new[] { "30%", "30%", "10%" });
        if (isAdmin)
        {
            columnWidths.Enqueue(Constants.DefaultEditDeleteButtonsWidth);
            columnWidths.Enqueue(Constants.DefaultEditDeleteButtonsWidth);
        }

        await Html.RenderPartialAsync("_DataTableInitialization", columnWidths);
    }
}