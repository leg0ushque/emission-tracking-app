emission-tracking-app\src\EmisTracking.Services.WebApi\Constants.cs 
 
﻿namespace EmisTracking.Services.WebApi
{
    public static class Constants
    {
        public const string HttpClientName = "MainHttpClient";

        public const string JwtCookiesKey = "secret_jwt_key";
    }
}
 

emission-tracking-app\src\EmisTracking.Services.WebApi\Services\AuthApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IAuthApiService
    {
        Task<ApiResponseModel<string>> PostRegister(RegisterModel model);
        Task<ApiResponseModel<object>> GetAuthValidateToken(string token);
        Task<ApiResponseModel<string>> PostChangePassword(ChangePasswordModel model);
        Task<ApiResponseModel<string>> PostSignIn(LoginModel model);

        Task<ApiResponseModel<object>> GetAuthLogout();
        Task<ApiResponseModel<object>> GetPing();

    }

    public class AuthApiService : BaseApiService, IAuthApiService
    {
        public AuthApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<string>> PostRegister(RegisterModel model)
        {
            return SendRequestAsync<string>(HttpMethod.Post, $"auth/register", model);
        }

        public Task<ApiResponseModel<string>> PostSignIn(LoginModel model)
        {
            return SendRequestAsync<string>(HttpMethod.Post, $"auth/login", model);
        }

        public Task<ApiResponseModel<string>> PostChangePassword(ChangePasswordModel model)
        {
            return SendRequestAsync<string>(HttpMethod.Post, $"auth/changepassword", model);
        }

        public Task<ApiResponseModel<object>> GetAuthValidateToken(string token)
        {
            return SendRequestAsync<object>(HttpMethod.Post, $"auth/validate", token);
        }

        public Task<ApiResponseModel<object>> GetAuthLogout()
        {
            return SendRequestAsync<object>(HttpMethod.Get, $"auth/logout");
        }

        public Task<ApiResponseModel<object>> GetPing()
        {
            return SendRequestAsync<object>(HttpMethod.Get, $"auth/ping");
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\BaseApiService.cs 
 
﻿using EmisTracking.Services.WebApi.Helpers;
using System;
using System.Net.Http;
using System.Net;
using System.Threading.Tasks;
using EmisTracking.WebApi.Models.Models;
using EmisTracking.Localization;

namespace EmisTracking.Services.WebApi.Services
{
    public abstract class BaseApiService
    {
        protected HttpClient _httpClient;

        public virtual async Task<ApiResponseModel<T>> SendRequestAsync<T>(HttpMethod method, string url, object content = null)
        {
            try
            {
                using var request = new HttpRequestMessage(method, url);

                if (content != null)
                {
                    var jsonContent = JsonHelper.ObjectToStringContent(content);
                    request.Content = jsonContent;
                }

                var response = await _httpClient.SendAsync(request);

                return await response.DeserializeContentAsync<ApiResponseModel<T>>();
            }
            catch (Exception ex) // FIXME?
            {
                return new ApiResponseModel<T>
                {
                    Success = false,
                    ErrorMessage = LangResources.ErrorTitle,
                    StatusCode = HttpStatusCode.InternalServerError,
                };
            }
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\BaseEntityApiService.cs 
 
﻿using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;

namespace EmisTracking.Services.WebApi.Services
{
    public abstract class BaseEntityApiService<TEntityViewModel> : BaseApiService, IBaseApiService<TEntityViewModel>
        where TEntityViewModel : class, IViewModel, new()
    {
        protected abstract string ControllerPath { get; }

        public virtual Task<ApiResponseModel<string>> CreateAsync(TEntityViewModel item)
        {
            return SendRequestAsync<string>(HttpMethod.Post, $"{ControllerPath}", item);
        }

        public Task<ApiResponseModel<List<TEntityViewModel>>> GetAllAsync(bool loadDependencies = false)
        {
            var path = $"{ControllerPath}";

            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<TEntityViewModel>>(HttpMethod.Get, path);
        }

        public virtual Task<ApiResponseModel<TEntityViewModel>> GetByIdAsync(string id, bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/{id}";
            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<TEntityViewModel>(HttpMethod.Get, path);
        }

        public virtual Task<ApiResponseModel<object>> UpdateAsync(TEntityViewModel item)
        {
            return SendRequestAsync<object>(HttpMethod.Put, $"{ControllerPath}", item);
        }

        public virtual Task<ApiResponseModel<object>> DeleteByIdAsync(string id)
        {
            return SendRequestAsync<object>(HttpMethod.Delete, $"{ControllerPath}/{id}");
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\ConsumptionApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IConsumptionApiService : IBaseApiService<ConsumptionViewModel>
    {
        public Task<ApiResponseModel<List<ConsumptionViewModel>>> GetByConsumptionGroupIdAsync(string id,
            bool loadDependencies = false);
    }

    public class ConsumptionApiService : BaseEntityApiService<ConsumptionViewModel>, IConsumptionApiService
    {
        protected override string ControllerPath => "consumptions";

        public ConsumptionApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<ConsumptionViewModel>>> GetByConsumptionGroupIdAsync(string id,
            bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/byConsumptionGroup/{id}";
            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<ConsumptionViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\GrossEmissionApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IGrossEmissionApiService : IBaseApiService<GrossEmissionViewModel>
    {
        public Task<ApiResponseModel<CalculationCheckResultViewModel>> Calculate(CalculationFormViewModel model);
        public Task<ApiResponseModel<CalculationCheckResultViewModel>> СheckCalculation(CalculationFormViewModel model);
    }

    public class GrossEmissionApiService : BaseEntityApiService<GrossEmissionViewModel>, IGrossEmissionApiService
    {
        protected override string ControllerPath => "grossemissions";

        public GrossEmissionApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<CalculationCheckResultViewModel>> Calculate(CalculationFormViewModel model)
        {
            return SendRequestAsync<CalculationCheckResultViewModel>(HttpMethod.Post, $"{ControllerPath}/calculate", model);
        }

        public Task<ApiResponseModel<CalculationCheckResultViewModel>> СheckCalculation(CalculationFormViewModel model)
        {
            return SendRequestAsync<CalculationCheckResultViewModel>(HttpMethod.Post, $"{ControllerPath}/checkCalculation", model);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\IBaseApiService.cs 
 
﻿using System.Collections.Generic;
using System.Threading.Tasks;
using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IBaseApiService<TEntityViewModel>
        where TEntityViewModel : class, IViewModel, new()
    {

        public Task<ApiResponseModel<string>> CreateAsync(TEntityViewModel item);

        public Task<ApiResponseModel<List<TEntityViewModel>>> GetAllAsync(bool loadDependencies = false);

        public Task<ApiResponseModel<TEntityViewModel>> GetByIdAsync(string id, bool loadDependencies = false);

        public Task<ApiResponseModel<object>> UpdateAsync(TEntityViewModel item);

        public Task<ApiResponseModel<object>> DeleteByIdAsync(string id);
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\MethodologyApiService.cs 
 
﻿using EmisTracking.WebApi.Models.ViewModels;
using System.Net.Http;

namespace EmisTracking.Services.WebApi.Services
{
    public class MethodologyApiService : BaseEntityApiService<MethodologyViewModel>
    {
        protected override string ControllerPath => "methodologies";

        public MethodologyApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\MethodologyParameterApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IMethodologyParameterApiService : IBaseApiService<MethodologyParameterViewModel>
    {
        public Task<ApiResponseModel<List<MethodologyParameterViewModel>>> GetByMethodologyIdAsync(
            string methodologyId, bool loadDependencies = false);
    }

    public class MethodologyParameterApiService : BaseEntityApiService<MethodologyParameterViewModel>, IMethodologyParameterApiService
    {
        protected override string ControllerPath => "methodologyparameters";

        public MethodologyParameterApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<MethodologyParameterViewModel>>> GetByMethodologyIdAsync(string methodologyId, bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/byMethodology/{methodologyId}";
            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<MethodologyParameterViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\ModeApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IModeApiService : IBaseApiService<ModeViewModel>
    {
        public Task<ApiResponseModel<List<ModeViewModel>>> GetAllWithMethodologiesAsync();
    }

    public class ModeApiService : BaseEntityApiService<ModeViewModel>, IModeApiService
    {
        protected override string ControllerPath => "modes";

        public ModeApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<ModeViewModel>>> GetAllWithMethodologiesAsync()
        {
            var path = $"{ControllerPath}/withMethodologies";

            return SendRequestAsync<List<ModeViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\OperatingTimeApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IOperatingTimeApiService : IBaseApiService<OperatingTimeViewModel>
    {
        public Task<ApiResponseModel<List<OperatingTimeViewModel>>> GetByEmissionSourceIdAsync(
            string id, bool loadDependencies = false);
    }

    public class OperatingTimeApiService : BaseEntityApiService<OperatingTimeViewModel>, IOperatingTimeApiService
    {
        protected override string ControllerPath => "operatingtimes";

        public OperatingTimeApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<OperatingTimeViewModel>>> GetByEmissionSourceIdAsync(string id, bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/bySource/{id}";
            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<OperatingTimeViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\ParameterValueApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface IParameterValueApiService : IBaseApiService<ParameterValueViewModel>
    {
        public Task<ApiResponseModel<List<ParameterValueViewModel>>> GetByParameterIdAsync(
            string id, bool loadDependencies = false);
    }

    public class ParameterValueApiService : BaseEntityApiService<ParameterValueViewModel>, IParameterValueApiService
    {
        protected override string ControllerPath => "parametervalues";

        public ParameterValueApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<ParameterValueViewModel>>> GetByParameterIdAsync(string id, bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/byParameter/{id}";
            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<ParameterValueViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\PollutantApiService.cs 
 
﻿using EmisTracking.WebApi.Models.ViewModels;
using System.Net.Http;

namespace EmisTracking.Services.WebApi.Services
{
    public class PollutantApiService : BaseEntityApiService<PollutantViewModel>
    {
        protected override string ControllerPath => "pollutants";

        public PollutantApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\SourceSubstanceApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface ISourceSubstanceApiService : IBaseApiService<SourceSubstanceViewModel>
    {
        Task<ApiResponseModel<List<SourceSubstanceViewModel>>> GetAllByEmissionSourceIdAsync(string emissionSourceId,
            bool loadDependencies = false);
    }

    public class SourceSubstanceApiService : BaseEntityApiService<SourceSubstanceViewModel>, ISourceSubstanceApiService
    {
        protected override string ControllerPath => "sourcesubstances";

        public SourceSubstanceApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<SourceSubstanceViewModel>>> GetAllByEmissionSourceIdAsync(string emissionSourceId,
            bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/byEmissionSource/{emissionSourceId}";

            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<SourceSubstanceViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\SpecificIndicatorApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface ISpecificIndicatorApiService : IBaseApiService<SpecificIndicatorViewModel>
    {
        Task<ApiResponseModel<List<SpecificIndicatorViewModel>>> GetByConsumptionGroupIdAsync(
            string consumptionGroupId, bool loadDependencies = false);
    }

    public class SpecificIndicatorApiService : BaseEntityApiService<SpecificIndicatorViewModel>, ISpecificIndicatorApiService
    {
        protected override string ControllerPath => "specificindicators";

        public SpecificIndicatorApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<SpecificIndicatorViewModel>>> GetByConsumptionGroupIdAsync(
            string consumptionGroupId, bool loadDependencies = false)
        {
            var path = $"{ControllerPath}/byConsumptionGroup/{consumptionGroupId}";
            if (loadDependencies)
                path += "?loadDependencies=true";

            return SendRequestAsync<List<SpecificIndicatorViewModel>>(HttpMethod.Get, path);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\SubdivisionApiService.cs 
 
﻿using EmisTracking.WebApi.Models.Models;
using EmisTracking.WebApi.Models.ViewModels;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace EmisTracking.Services.WebApi.Services
{
    public interface ISubdivisionApiService : IBaseApiService<SubdivisionViewModel>
    {
        public Task<ApiResponseModel<List<SubdivisionViewModel>>> GetAllByAreaIdAsync(string areaId);
    }

    public class SubdivisionApiService : BaseEntityApiService<SubdivisionViewModel>, ISubdivisionApiService
    {
        protected override string ControllerPath => "subdivisions";

        public SubdivisionApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }

        public Task<ApiResponseModel<List<SubdivisionViewModel>>> GetAllByAreaIdAsync(string areaId)
        {
            return SendRequestAsync<List<SubdivisionViewModel>>(HttpMethod.Get, $"{ControllerPath}/ofArea?areaId={areaId}");
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\TaxApiService.cs 
 
﻿using EmisTracking.WebApi.Models.ViewModels;
using System.Net.Http;

namespace EmisTracking.Services.WebApi.Services
{
    public class TaxApiService : BaseEntityApiService<TaxViewModel>
    {
        protected override string ControllerPath => "taxes";

        public TaxApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }
    }
}
 
emission-tracking-app\src\EmisTracking.Services.WebApi\Services\TaxRateApiService.cs 
 
﻿using EmisTracking.WebApi.Models.ViewModels;
using System.Net.Http;

namespace EmisTracking.Services.WebApi.Services
{
    public class TaxRateApiService : BaseEntityApiService<TaxRateViewModel>
    {
        protected override string ControllerPath => "taxrates";

        public TaxRateApiService(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient(Constants.HttpClientName);
        }
    }
}
 
