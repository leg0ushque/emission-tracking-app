// <auto-generated />
using System;
using EmisTracking.Services.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmisTracking.Services.Database.Migrations.EmissionDb
{
    [DbContext(typeof(EmissionDbContext))]
    [Migration("20250603154759_InitialEdbCreate")]
    partial class InitialEdbCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmisTracking.Services.Entities.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Consumption", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConsumptionGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionGroupId");

                    b.ToTable("Consumptions");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.ConsumptionGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MethodologyId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MethodologyId");

                    b.ToTable("ConsumptionGroups");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.EmissionSource", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MethodologyId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ModeId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessCategory")
                        .HasColumnType("int");

                    b.Property<string>("SubdivisionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("MethodologyId");

                    b.HasIndex("ModeId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("EmissionSources");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.GrossEmission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CalculationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<string>("MethodologyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("SourceSubstanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MethodologyId");

                    b.HasIndex("SourceSubstanceId");

                    b.HasIndex("TaxId");

                    b.ToTable("GrossEmissions");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Methodology", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModeId");

                    b.ToTable("Methodologies");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.MethodologyParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("FormulaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodologyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParameterType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MethodologyId");

                    b.ToTable("MethodologyParameters");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Mode", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.OperatingTime", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("EmissionSourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmissionSourceId");

                    b.ToTable("OperatingTimes");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.ParameterValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("GrossEmissionId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MethodologyParameterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrossEmissionId");

                    b.HasIndex("MethodologyParameterId");

                    b.ToTable("ParameterValues");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Pollutant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AggregateState")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HazardClass")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pollutants");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.SourceSubstance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("AnnualAmount")
                        .HasColumnType("float");

                    b.Property<string>("EmissionSourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("GasCleaningUnitType")
                        .HasColumnType("int");

                    b.Property<bool>("IsRegulated")
                        .HasColumnType("bit");

                    b.Property<string>("PollutantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("PurificationPercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmissionSourceId");

                    b.HasIndex("PollutantId");

                    b.ToTable("SourceSubstances");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.SpecificIndicator", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConsumptionGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PollutantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionGroupId");

                    b.HasIndex("PollutantId");

                    b.ToTable("SpecificIndicators");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Subdivision", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Subdivisions");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Tax", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("HazardClass")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.TaxRate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HazardClass")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Consumption", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.ConsumptionGroup", "ConsumptionGroup")
                        .WithMany()
                        .HasForeignKey("ConsumptionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsumptionGroup");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.ConsumptionGroup", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.Methodology", "Methodology")
                        .WithMany()
                        .HasForeignKey("MethodologyId");

                    b.Navigation("Methodology");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.EmissionSource", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.Methodology", "Methodology")
                        .WithMany()
                        .HasForeignKey("MethodologyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmisTracking.Services.Entities.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmisTracking.Services.Entities.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Methodology");

                    b.Navigation("Mode");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.GrossEmission", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.Methodology", "Methodology")
                        .WithMany()
                        .HasForeignKey("MethodologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmisTracking.Services.Entities.SourceSubstance", "SourceSubstance")
                        .WithMany()
                        .HasForeignKey("SourceSubstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmisTracking.Services.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Methodology");

                    b.Navigation("SourceSubstance");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Methodology", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.MethodologyParameter", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.Methodology", "Methodology")
                        .WithMany()
                        .HasForeignKey("MethodologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Methodology");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.OperatingTime", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.EmissionSource", "EmissionSource")
                        .WithMany()
                        .HasForeignKey("EmissionSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionSource");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.ParameterValue", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.GrossEmission", "GrossEmission")
                        .WithMany()
                        .HasForeignKey("GrossEmissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmisTracking.Services.Entities.MethodologyParameter", "MethodologyParameter")
                        .WithMany()
                        .HasForeignKey("MethodologyParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrossEmission");

                    b.Navigation("MethodologyParameter");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.SourceSubstance", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.EmissionSource", "EmissionSource")
                        .WithMany()
                        .HasForeignKey("EmissionSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmisTracking.Services.Entities.Pollutant", "Pollutant")
                        .WithMany()
                        .HasForeignKey("PollutantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionSource");

                    b.Navigation("Pollutant");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.SpecificIndicator", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.ConsumptionGroup", "ConsumptionGroup")
                        .WithMany()
                        .HasForeignKey("ConsumptionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmisTracking.Services.Entities.Pollutant", "Pollutant")
                        .WithMany()
                        .HasForeignKey("PollutantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsumptionGroup");

                    b.Navigation("Pollutant");
                });

            modelBuilder.Entity("EmisTracking.Services.Entities.Subdivision", b =>
                {
                    b.HasOne("EmisTracking.Services.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });
#pragma warning restore 612, 618
        }
    }
}
